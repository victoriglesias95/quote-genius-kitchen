
import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { SidebarProvider } from '@/components/ui/sidebar';
import { AppSidebar, SidebarToggle } from '@/components/layout/Sidebar';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Save, Plus, Trash } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Supplier } from '@/components/suppliers/SupplierList';
import { toast } from 'sonner';
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';

// Import sample suppliers data and update function
import { sampleSuppliers } from './Suppliers';

const EditSupplier = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  // Find the supplier with the matching ID
  const supplierIndex = sampleSuppliers.findIndex(s => s.id === id);
  const supplier = sampleSuppliers[supplierIndex];
  
  const [isAddProductDialogOpen, setIsAddProductDialogOpen] = React.useState(false);
  const [isEditProductDialogOpen, setIsEditProductDialogOpen] = React.useState(false);
  const [currentProduct, setCurrentProduct] = React.useState<null | { id: string; name: string; category: string; unit: string; defaultPrice?: number }>(null);
  const [products, setProducts] = React.useState(supplier?.products || []);

  // Create validation schema for supplier form
  const supplierSchema = z.object({
    name: z.string().min(1, "Supplier name is required"),
    category: z.string().min(1, "Category is required"),
    contactPerson: z.string().min(1, "Contact person is required"),
    email: z.string().email("Invalid email address"),
    phone: z.string().min(1, "Phone number is required"),
    status: z.enum(["active", "inactive"])
  });

  // Create validation schema for product form
  const productSchema = z.object({
    name: z.string().min(1, "Product name is required"),
    category: z.string().min(1, "Category is required"),
    unit: z.string().min(1, "Unit is required"),
    defaultPrice: z.coerce.number().min(0, "Price must be a positive number").optional()
  });

  // Set up form for supplier details
  const supplierForm = useForm<z.infer<typeof supplierSchema>>({
    resolver: zodResolver(supplierSchema),
    defaultValues: supplier ? {
      name: supplier.name,
      category: supplier.category,
      contactPerson: supplier.contactPerson,
      email: supplier.email,
      phone: supplier.phone,
      status: supplier.status
    } : {
      name: "",
      category: "",
      contactPerson: "",
      email: "",
      phone: "",
      status: "active" 
    }
  });

  // Set up form for product details
  const productForm = useForm<z.infer<typeof productSchema>>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      name: "",
      category: "",
      unit: "",
      defaultPrice: undefined
    }
  });

  // Set up form for editing product
  const editProductForm = useForm<z.infer<typeof productSchema>>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      name: "",
      category: "",
      unit: "",
      defaultPrice: undefined
    }
  });

  if (!supplier) {
    return (
      <SidebarProvider>
        <div className="min-h-screen flex w-full">
          <AppSidebar />
          <div className="flex-1">
            <SidebarToggle />
            <div className="p-6 md:p-8">
              <Button variant="outline" onClick={() => navigate('/suppliers')} className="mb-6">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Suppliers
              </Button>
              <div className="text-center p-12">
                <h2 className="text-2xl font-bold mb-2">Supplier Not Found</h2>
                <p className="text-gray-500">The supplier you're looking for doesn't exist or has been removed.</p>
              </div>
            </div>
          </div>
        </div>
      </SidebarProvider>
    );
  }

  const handleAddProduct = (data: z.infer<typeof productSchema>) => {
    const newProduct = {
      id: `temp-${Date.now()}`, // In a real app, this would be generated by the backend
      ...data
    };
    
    setProducts([...products, newProduct]);
    setIsAddProductDialogOpen(false);
    productForm.reset();
    toast.success('Product added successfully');
  };

  const handleEditProduct = (data: z.infer<typeof productSchema>) => {
    if (!currentProduct) return;
    
    const updatedProducts = products.map(p => 
      p.id === currentProduct.id ? { ...p, ...data } : p
    );
    
    setProducts(updatedProducts);
    setIsEditProductDialogOpen(false);
    setCurrentProduct(null);
    toast.success('Product updated successfully');
  };

  const handleRemoveProduct = (productId: string) => {
    setProducts(products.filter(p => p.id !== productId));
    toast.success('Product removed successfully');
  };

  const openEditProductDialog = (product: { id: string; name: string; category: string; unit: string; defaultPrice?: number }) => {
    setCurrentProduct(product);
    editProductForm.reset({
      name: product.name,
      category: product.category,
      unit: product.unit,
      defaultPrice: product.defaultPrice
    });
    setIsEditProductDialogOpen(true);
  };

  const handleSupplierSubmit = (data: z.infer<typeof supplierSchema>) => {
    // In a real app, this would be an API call to update the supplier
    if (supplierIndex !== -1) {
      sampleSuppliers[supplierIndex] = {
        ...sampleSuppliers[supplierIndex],
        ...data,
        products
      };
      
      toast.success('Supplier updated successfully');
      navigate(`/suppliers/${id}`);
    }
  };

  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full">
        <AppSidebar />
        <div className="flex-1">
          <SidebarToggle />
          <div className="p-6 md:p-8">
            <Button variant="outline" onClick={() => navigate(`/suppliers/${id}`)} className="mb-6">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Supplier Details
            </Button>
            
            <div className="flex justify-between items-start mb-8">
              <div>
                <h1 className="text-3xl font-bold text-navy">Edit Supplier</h1>
                <p className="text-dark-gray">Update supplier information and products</p>
              </div>
              <Button onClick={supplierForm.handleSubmit(handleSupplierSubmit)} className="gap-2">
                <Save className="h-4 w-4" />
                Save Changes
              </Button>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-10">
              <Card className="lg:col-span-3">
                <CardHeader>
                  <CardTitle>Supplier Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <Form {...supplierForm}>
                    <form className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={supplierForm.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Supplier Name</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="Enter supplier name" />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={supplierForm.control}
                        name="category"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Category</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="e.g., Produce, Seafood, Meat" />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={supplierForm.control}
                        name="contactPerson"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Contact Person</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="Enter contact name" />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={supplierForm.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Email</FormLabel>
                            <FormControl>
                              <Input {...field} type="email" placeholder="email@example.com" />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={supplierForm.control}
                        name="phone"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Phone</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="(555) 123-4567" />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={supplierForm.control}
                        name="status"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-center space-x-3 space-y-0 mt-7">
                            <FormControl>
                              <Checkbox 
                                checked={field.value === "active"}
                                onCheckedChange={(checked) => {
                                  field.onChange(checked ? "active" : "inactive");
                                }}
                              />
                            </FormControl>
                            <FormLabel className="font-normal cursor-pointer">
                              Active Supplier
                            </FormLabel>
                          </FormItem>
                        )}
                      />
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </div>
            
            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle>Default Products</CardTitle>
                <Button onClick={() => setIsAddProductDialogOpen(true)} size="sm" className="gap-1">
                  <Plus className="h-4 w-4" />
                  Add Product
                </Button>
              </CardHeader>
              <CardContent>
                <div className="border rounded-md">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left p-4 font-medium">Name</th>
                        <th className="text-left p-4 font-medium">Category</th>
                        <th className="text-left p-4 font-medium">Unit</th>
                        <th className="text-right p-4 font-medium">Default Price</th>
                        <th className="p-4 w-[100px]"></th>
                      </tr>
                    </thead>
                    <tbody>
                      {products.length > 0 ? (
                        products.map((product) => (
                          <tr key={product.id} className="border-b hover:bg-muted/50">
                            <td className="p-4">{product.name}</td>
                            <td className="p-4">{product.category}</td>
                            <td className="p-4">{product.unit}</td>
                            <td className="p-4 text-right">{product.defaultPrice ? `$${product.defaultPrice.toFixed(2)}` : 'N/A'}</td>
                            <td className="p-4 text-right">
                              <div className="flex justify-end gap-2">
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-8 w-8 p-0" 
                                  onClick={() => openEditProductDialog(product)}
                                >
                                  <span className="sr-only">Edit</span>
                                  <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" className="h-4 w-4">
                                    <path d="M11.8536 1.14645C11.6583 0.951184 11.3417 0.951184 11.1465 1.14645L3.71455 8.57836C3.62459 8.66832 3.55263 8.77461 3.50251 8.89155L2.04044 12.303C1.9599 12.491 2.00189 12.709 2.14646 12.8536C2.29103 12.9981 2.50905 13.0401 2.69697 12.9596L6.10847 11.4975C6.2254 11.4474 6.3317 11.3754 6.42166 11.2855L13.8536 3.85355C14.0488 3.65829 14.0488 3.34171 13.8536 3.14645L11.8536 1.14645ZM4.42166 9.28547L11.5 2.20711L12.7929 3.5L5.71455 10.5784L4.21924 11.2192L3.78081 10.7808L4.42166 9.28547Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                                  </svg>
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-8 w-8 p-0 text-destructive" 
                                  onClick={() => handleRemoveProduct(product.id)}
                                >
                                  <span className="sr-only">Remove</span>
                                  <Trash className="h-4 w-4" />
                                </Button>
                              </div>
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan={5} className="p-4 text-center text-gray-500">
                            No products available. Click "Add Product" to add one.
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
            
            {/* Add Product Dialog */}
            <Dialog open={isAddProductDialogOpen} onOpenChange={setIsAddProductDialogOpen}>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Add New Product</DialogTitle>
                </DialogHeader>
                <Form {...productForm}>
                  <form onSubmit={productForm.handleSubmit(handleAddProduct)} className="space-y-4">
                    <FormField
                      control={productForm.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Product Name</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="Enter product name" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={productForm.control}
                      name="category"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Category</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g., Vegetables, Meat, Dairy" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={productForm.control}
                      name="unit"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Unit</FormLabel>
                          <FormControl>
                            <Select 
                              onValueChange={field.onChange} 
                              defaultValue={field.value}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Select unit" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="kg">kg</SelectItem>
                                <SelectItem value="liter">liter</SelectItem>
                                <SelectItem value="each">each</SelectItem>
                                <SelectItem value="dozen">dozen</SelectItem>
                                <SelectItem value="pound">pound</SelectItem>
                              </SelectContent>
                            </Select>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={productForm.control}
                      name="defaultPrice"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Default Price (Optional)</FormLabel>
                          <FormControl>
                            <Input 
                              type="number" 
                              step="0.01" 
                              min="0" 
                              {...field} 
                              value={field.value === undefined ? '' : field.value}
                              onChange={e => field.onChange(e.target.value === '' ? undefined : parseFloat(e.target.value))}
                              placeholder="0.00" 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <DialogFooter>
                      <Button type="button" variant="outline" onClick={() => setIsAddProductDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button type="submit">Add Product</Button>
                    </DialogFooter>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>
            
            {/* Edit Product Dialog */}
            <Dialog open={isEditProductDialogOpen} onOpenChange={setIsEditProductDialogOpen}>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Edit Product</DialogTitle>
                </DialogHeader>
                <Form {...editProductForm}>
                  <form onSubmit={editProductForm.handleSubmit(handleEditProduct)} className="space-y-4">
                    <FormField
                      control={editProductForm.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Product Name</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="Enter product name" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={editProductForm.control}
                      name="category"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Category</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g., Vegetables, Meat, Dairy" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={editProductForm.control}
                      name="unit"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Unit</FormLabel>
                          <FormControl>
                            <Select 
                              onValueChange={field.onChange} 
                              defaultValue={field.value}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Select unit" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="kg">kg</SelectItem>
                                <SelectItem value="liter">liter</SelectItem>
                                <SelectItem value="each">each</SelectItem>
                                <SelectItem value="dozen">dozen</SelectItem>
                                <SelectItem value="pound">pound</SelectItem>
                              </SelectContent>
                            </Select>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={editProductForm.control}
                      name="defaultPrice"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Default Price (Optional)</FormLabel>
                          <FormControl>
                            <Input 
                              type="number" 
                              step="0.01" 
                              min="0" 
                              {...field} 
                              value={field.value === undefined ? '' : field.value}
                              onChange={e => field.onChange(e.target.value === '' ? undefined : parseFloat(e.target.value))}
                              placeholder="0.00" 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <DialogFooter>
                      <Button type="button" variant="outline" onClick={() => setIsEditProductDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button type="submit">Update Product</Button>
                    </DialogFooter>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </div>
    </SidebarProvider>
  );
};

export default EditSupplier;
